type bool_as_string = string wrap <ocaml
	t="bool"
	wrap="fun x -> x <> \"0\""
	unwrap="function true -> \"1\" | false -> \"0\""
>

type bool_as_int = int wrap <ocaml
	t="bool"
	wrap="fun x -> x <> 0"
	unwrap="function true -> 1 | false -> 0"
>

type int_option_as_string = string wrap <ocaml
	t="int option"
	wrap="function \"\" -> None | s -> Some (int_of_string s)"
	unwrap="function None -> \"\" | Some i -> string_of_int i"
>

type int_with_commas = string wrap <ocaml
	t="int"
	wrap="fun s -> int_of_string (String.concat \"\" (String.split_on_char ',' s))"
	unwrap="string_of_int"
>

type category_as_string = string wrap <ocaml
	module="Category"
>

type 'v list_as_singleton = 'v list
	wrap <ocaml t="'v"
		wrap="fun l -> List.hd l"
		unwrap="fun x -> [x]">

(*type categorised_results = rider_result list
	wrap <ocaml t="rider_result list array"
		wrap="fun riders -> let arr = Array.make 7 [] in
			List.iter (fun rider ->
				let ix = Category.int_of_category rider.r_category in
				arr.(ix) <- rider :: arr.(ix)) riders;
			arr"
		unwrap="fun arr -> List.concat (Array.to_list arr)">

type categorised_sprints = sprint_results list
	wrap <ocaml t="sprint_results list array"
		wrap="fun riders -> let arr = Array.make 7 [] in
			List.iter (fun rider ->
				let ix = Category.int_of_category rider.s_category in
				arr.(ix) <- rider :: arr.(ix)) riders;
			arr"
		unwrap="fun arr -> List.concat (Array.to_list arr)">*)

type categorised_placings = placing list
	wrap <ocaml t="placing list array"
		wrap="fun placings -> let arr = Array.make 7 [] in
			List.iter (fun placing ->
				let ix = Category.int_of_category placing.p_category in
				arr.(ix) <- placing :: arr.(ix)) placings;
			arr"
		unwrap="fun arr -> List.concat (Array.to_list arr)">

type json <ocaml module="Yojson.Safe"> = abstract

(*type rider_result = {
	ftp : int_option_as_string;
	friend: bool_as_int;
	pt: string;
	label: string;
	zid: int;
	pos: int;
	position_in_cat: int;
	name: string;
	act_id: int;
	act_name: string;
	zwid: int;
	res_id: string;
	aid: string;
	lag: int;
	uid: string;
	time: float list_as_singleton;
	time_gun: float;
	gap: float;
	male: bool_as_int;
	tid: string;
	topen: string;
	tname: string;
	tc: string;
	tbc: string;
	tbd: string;
	zeff: int;
	category: category_as_string;
	height: int list_as_singleton;
	flag: string;
	avg_hr: int list_as_singleton;
	max_hr: int list_as_singleton;
	hrmax: int list_as_singleton;
	hrm: bool_as_int;
	weight: float list_as_singleton;
	power_type: int;
	display_pos: int;
	age: int;
	zada: bool_as_int;
	note: string;
	division: int;
	skill: json;
	skill_gain: json;
	np: int list_as_singleton;
	hrr: float list_as_singleton;
	hreff: int list_as_singleton;
	avg_power: int list_as_singleton;
	avg_wkg: float list_as_singleton;
	wkg_ftp: float list_as_singleton;
	wftp: int list_as_singleton;
	wkg_guess: bool_as_int;
	wkg1200: float list_as_singleton;
	wkg300: float list_as_singleton;
	wkg120: float list_as_singleton;
	wkg60: float list_as_singleton;
	wkg30: float list_as_singleton;
	wkg15: float list_as_singleton;
	wkg5: float list_as_singleton;
	w1200: int list_as_singleton;
	w300: int list_as_singleton;
	w120: int list_as_singleton;
	w60: int list_as_singleton;
	w30: int list_as_singleton;
	w15: int list_as_singleton;
	w5: int list_as_singleton;
	is_guess: bool_as_int;
	upg: bool_as_int;
	penalty: int;
	reg: int;
	fl: int;
	pts: int;
	pts_pos: int;
	info: bool_as_int;
	info_notes: string list;
} <ocaml field_prefix="r_">

type race = {
	race_results <json name="data">: categorised_results;
}*)

type 'v table_as_object = (string * 'v) list <json repr="object">
	wrap <ocaml t="(string, 'v) Hashtbl.t"
		wrap="fun l -> let tbl = Hashtbl.create (2 * List.length l) in
			List.iter (fun (k, v) -> Hashtbl.add tbl k v) l; tbl"
		unwrap="fun tbl -> Hashtbl.fold (fun k v l -> (k, v) ::l) tbl []">

(*type sprint_results = {
	ftp : int_option_as_string;
	pt: string;
	label: string;
	zid: int;
	pos: int;
	position_in_cat: int;
	name: string;
	zwid: int;
	res_id: string;
	aid: string;
	male: bool_as_int;
	tid: string;
	topen: string;
	tname: string;
	tc: string;
	tbc: string;
	tbd: string;
	category: category_as_string;
	height: int list_as_singleton;
	flag: string;
	hrm: bool_as_int;
	weight: float list_as_singleton;
	power_type: int;
	display_pos: int;
	age: int;
	zada: bool_as_int;
	note: string;
	is_guess: bool_as_int;
	upg: bool_as_int;
	penalty: int;
	reg: int;
	fl: int;
	msec: float table_as_object;
	watts: int table_as_object;
	wkg: float table_as_object;
} <ocaml field_prefix="s_">

type sprints = {
	sprint_results <json name="data">: categorised_sprints;
}*)

type placing = {
	zid: string;
	pos: int;
	position_in_cat: int;
	name: string;
	zwid: string;
	res_id: string;
	aid: string;
	uid: string;
	event_date: int nullable;
	event_title: string nullable;
	lag: int;
	time: float;
	time_gun: float;
	gap: float;
	male: bool;
	tid: string;
	tname: string;
	tc: string;
	tbc: string;
	tbd: string;
	category: category_as_string;
	flag: string;
	avg_hr: int;
	max_hr: int;
	hrm: bool;
	power_type: int;
	display_pos: int;
	zada: bool;
	avg_power: int;
	avg_wkg: float;
	wkg_ftp: float;
	wftp: int;
	wkg_guess: bool;
	is_guess: bool;
	upg: bool;
	penalty: int;
	reg: bool;
	pts: int;
	pts_pos: int;
} <ocaml field_prefix="p_">

type placings = {
	placings <json name="data">: categorised_placings;
}

type zwifter = {
	zwid: string;
	name: string;
	pos: int;
	race_time: float;
	time_diff: float;
	bpm: int;
	hrm: bool;
	power_type: int;
	watts: int;
	wkg: float;
	wkg_ftp: float;
}

type zwifters = {
	zwifters <json name="data">: zwifter list;
}
